#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>
#include <fcntl.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <signal.h>
#include <cstdarg>
#include <errno.h>

#include "pt.h"
#define QWE_UTILC_DEF
#include "uc0.h"
#include "uc1.h"
#include "util.h"
#include "util2.h"
#include "errtab.inc"
#include "cfgtab.inc"
#include "glob.h"

static unsigned int primetab17[2048] = {
1689570158,2171409050,2253016114, 563511821,1510225097,2760466720, 696652100,1244168913, 843202608, 137664801,
1109722699, 344606852,1815101957, 188789768, 307300512,1694796072,2152476824,2148680854,1091715617,3223389385,
   9973042, 134498560,2187892353, 570959280,1084393800,2416191065, 809713670,1761645124, 134775312, 306253220,
 604029024, 140583634,2182808708,  17879809,3225722882, 345071650,  78004236, 153130194,   5382292,1285689352,
1359053312,2760574992,1144035877,  55316609,2152867074, 545540360, 402666064, 605110434,  25428264, 172072961,
 905987346, 690356232,3227615875, 269485184,1210187885,3255576152, 612976656,1159747616, 419439752, 281027842,
  18090088,2150118090, 642450432,1620054784,3492118658, 839909632, 562447116,1124597777, 273155108,   9605132,
   2957379, 612894982, 154320960,1392542217,2524973184,1073774913, 138940488, 542656662, 545309481,2455802882,
 578887680,  94376004,1224839232,    656416,1211402532,3224141843, 603990402, 134219845,1376007832,  80741508,
1150323200, 409285250,  34209936, 671236097,2449777728,2249262128, 738214408,3372745810, 306733188,1143249161,
  50340864, 268443924,  87169537,1077944456,2227374342,1613758784, 292028952,2718043280, 696647684,2183402633,
2148024578, 142612740,1114116624,  33555620, 201724001, 302055440,2483232784,1695695393, 168596504, 335620100,
1084492329,  20971728, 541131920,1216495661, 268443841, 604504368, 612653316,2183725568,  39346432,1209434440,
 287375376,2697592838,  67109440,1107341457, 109120516, 622086153, 287645842,2248802464,1208140044, 138747904,
 110624818,   2233092,2168980610, 310526996,1074796580,3492315203, 612442116, 738252900,1091047945,  33554594,
1092667969, 402723008,2753037476, 546574880,  37789827,  75514930, 201332736,2321581632, 310928384,   8519941,
3238109770,  67723536,1610647553, 138458113,2147680518,  76824584,2150178954,  38931458,   8667649,  40141952,
 805324850, 555892804,3272081920, 550503584,1075189824,1378353216, 344066192, 135272449, 171999753,2157125792,
 536920072,  17104978, 101793808,     33292,2588184651,2424317952, 151407108,   2622019,   1573172,1149241701,
  35913731, 340287874, 672268353,1359492096,2417100036,1619298600, 273223698,2185838630,  17862912,2285904906,
  68176912, 748834816, 172527680, 307233200,  77856776,2452135945, 272826370,1092616737, 134230657,   5377028,
 545540385,2164326928, 574638096,1770258689,3355521217,   8930306, 755106060,   6361792, 817889440, 135397696,
2147491851,2214674580,   3276864, 184583184, 100728868,1099205161, 134746240,2147699860,1083588609,1344282689,
2726896930, 547635264,  19432962, 273293600, 135528456,1109722176, 272834818, 553685508, 407674897,2214791458,
  68192577,  19145346,2215118868, 151044360,2319560770, 914358274, 614484228,  33554577,  43139476, 134612993,
3489726473,2156472342,1744830560,1343000577,2151678240,1093681728,2166693888,   4800518,1225916680, 404791296,
2785084720, 673452032,3357540864, 310902816,   9605132,1107371522,  67127574,  16925220, 437026952,   1050752,
1150550624, 292094088,2685536304,   8655652,3227844738, 805316624,  18875140,3355510289, 549585024, 209850376,
1376518675,2952806406,  17842273, 268732056, 345114756,1098924384,2164527130, 541147170,1090540073, 274740232,
 268511232, 142868544,1210093634,  38929412,  69208064,    885248, 268583042,1075857413,  16777369,  12592134,
 553943656, 138678290,2789212164, 152490016,  37823689,2450066464,      4672,1124663360,  43524228,   2363649,
  50340931, 809568400,1277188132, 268993152, 109126948, 537921857,2151944216, 608829456, 680788237,3221237888,
2215665666, 150995468, 134316546, 549585936,  67504488, 285212696, 269158544, 201490977,    570896,  37814310,
 556026369,2149851162,    148480,    147501, 270570635,2794463232, 738202432,  23168529,  34619776,1211138308,
1344806984, 277488000, 152045572,1112018960,2457996448,  86032480,  20979922,2181563392,    164397,1212252232,
  76611600,   8651524,   6816962, 583033856,1144129600,2432730633,     75778, 603998308,1124110352,2253529344,
 546343745,2282233920, 538133508,1619264000,1076138113, 268959792,  16910344,1126171664, 311443636,1283457384,
3221749784, 272648466,1090525732, 273425545, 273810432,1092635145, 292102728, 101713940, 679772196,1073745920,
 638058768, 671500296,1107366912, 537527428, 142737664, 304382464,2688565252,  68194368, 272638608, 276835360,
  67126056,2164326488, 537479184,    295713,   4498498,2685430784,   8407108,3376971907,  33554432,  78647301,
 271123475,  67649682,   2261572, 419438617,2424373536,1090554464, 272958144,2718040068, 554713097,1107370057,
 335555632,  69337412,2299040258, 276832516,1075839237,    294977,2956986642,  20076644,1090555912,2160134404,
   9439329,  19136666, 637667346, 134644229,1210056712, 605552672,    131912,    589841, 273285508,  67147777,
3221259800,2155945984,  87035908,1242346496,  43067778,1142947880,2435580096,2717991040, 151261696, 134226115,
 571476994, 738197508,3221259793, 840040448,1082165568,1342505536,2760007814,1293027936, 302551168, 335677824,
 539230536,2420375690,  33620996,   1233152,   4195338, 612442418, 545528072,2299003906,  33694848,1149376616,
1075904578,2147559424,1075872325,  34373649,2420122624, 538984449, 422060112, 537477120,1610907656, 136347712,
 873023792, 606343424,3259039874,  43123712, 201359396,  16818178,  71393286,  16830497, 306708481, 311493764,
1143209992, 406917632,2151746598, 537154048,2418278409,  35145760, 161612544,2315261136,   4859268,1075091488,
    369152, 339738624, 740317185, 151028864,  43065376,1102053896, 151007240,  35127312,    131617, 138683392,
2986369042, 201462340,3359670464, 542114848,  78643205,1395196939, 810049792, 689996288,1392514560, 272834594,
  75497544,   4194514,2147697826, 134479913,1080296640,2215192624, 562057284,3221262850, 579362832,     32776,
2198111256, 545325206,1157628421,1358988424,2253463584,   9718593, 285737088,2153270304, 537264900, 134545545,
   9438498, 159514688,        80, 549601696, 135659528,3491833408,2424375440,1140981825, 168562696,  76548486,
  77645824,2300588040, 571539588, 134234156,1208070146, 537460994,    262916,1113588352, 273293616,    133444,
 301999105,2759860610,  67244064, 406888593, 100794372,  83888489,     66136,     18432, 546439936,3355522048,
 805849120, 545276424,  23629969,  34750468, 135397473, 285253633,  71835908, 201364004,    295937,2517762304,
1101005120,2284331656,2151826432,  18092580, 442536002, 276890640, 688261192,  37749379, 276849700,1074823173,
1107821058, 537461124,1610633220, 322973713,   8455170,1159727113,2422280266,  34081830,1610649889,  33555458,
 101190656, 142886920,2147484177, 542769316,  67405824,    589826, 340330516,  67160096,1497407633, 269615232,
1702920192,    262144,   1654912,1619264289, 438568128,2155897106, 151257608, 136319554, 546309172,  10486017,
2433220619, 872562834,1628473408,1073742361,2160076036, 553912424,    270976,2214661280, 134234400,2317353098,
  76040192, 142741764,1225360960, 268452004,  77725953,2148302928,2692892672,1091704833,1095238657,     74752,
   1345536,  23592962, 575277088,   8422152,3254846601, 872415232, 679608324,1245774338,  42075536,  69500937,
2449539137, 335620224,1277186048,1124380688,  76554660,1140851201, 140771400, 541196294,  26345992,1344274506,
 579872050, 134220036,  18972689, 838862096, 143951880,3238863880, 537608320,  68294720, 272638464,2193687846,
 607125760, 138486274,   1722404, 672322085,1074004034,  33571120, 606081792,2299036881,   5375104,  10754116,
2434795008, 541198608, 674250788,1077969920,  68159616,1074006025, 419439112,2147483650, 553779756,1075875841,
 872418304,  18896968,2149581891,   9437204,      4461,  50339904, 814235664,1694517765, 403186704,2147690628,
1085293088, 426315776,2147483652,    311812,    327681,2517116194,   2228740,  19468496, 268984480,1142292740,
  36176400,2218805378, 673353760,1073742976,2147492868,1611662121,2164260936, 542179488,  16830732,2449743937,
2450522112,  84165120,2151712257, 542253072,1209008161,3489661450,2152218898,1207959556,    270857, 272826404,
1140853344, 137109522,2214609952, 134627337,2151678145, 311951392, 547491912,3225977856, 311435280,   8558600,
  50634762,  12789760,  68174404,   4195336,   1049856,  75498273, 275321480,  67634176,1216610820, 404751433,
 813720578,    131336, 139006546, 277365024,   3409992,3490022913,2223177728,1090666529,1078493200,   5316770,
  16795904, 406855824, 570572802, 142622725, 404754562,2181104896,  67131456,  19501185, 570451104,  10617152,
    853016,2491441152, 219185760, 302788736, 301989920, 555794496, 272695896,  33768576, 697307908,3225681928,
 637542656,  25172480, 169874451, 838869012,1073743969,2148081730,2155938054,1744847456,1107853968,2147615872,
    264969,2165047448,2219328518,   9569064, 171999233,  42011648, 671371528, 153092752,     24592, 211845385,
    631808, 545269762,  67240448,    267393, 303106308,  18890848, 289419336,2248804352,1610874880,3489727617,
2417508610,   2099712, 134284993, 281699456,1216387332,1344307713,2222999696,   2265120, 402915353,2249204768,
 604029504,   4460562, 605030422,  17175040, 302026760,2148551938,   2248768,     69699,    663856,   1310976,
3238298640,    665872, 536906241,1225527809,   8455200,1610875208, 135008896,  71976976, 671092776,1346733120,
 101736464, 159383876,1107396096,   9437344,1076006917,2148008001,  12584962,1227905025,1090524169,2147617794,
 604014912,2416250888,2181709874,1628569608,   2163712, 605029410,  17041928,1075838992, 579339396,   1216544,
  19138131, 336281604, 218268256, 135041040, 335546656, 612401161,  20971650, 536953858,1082408972,   4263946,
2148074800, 538970180,1128857602, 536879392, 146145536,  34079808,2151743872, 605030464, 302260224, 314575238,
  68452641,2300576256,2148680884,1761661184,1107329088,  68681746, 554060032,  36176898, 281018756, 136314984,
2433220672, 612434192,1276170756, 268469896, 335678592,1083214336,2149654552, 609747108,1611665440,1212231873,
    608258,  84019520,1243644433,  35136544, 203558924,  50332682,  71845894, 553648644, 402687104, 302124032,
  85196801,2302742658,2755659794,1216610593,1080037378, 335554562, 547373064,3254784593, 807010560,1276283200,
     32770,2684420372, 555882529,  20973080,  76546176,  70255176,2282029064,  71829540,    393764,       128,
2417059088,  75631104,1214252227,  43123748,1082165316,2150172184,       272, 554747972,1258303625, 336593312,
1083441664,   6627328, 574622882, 538083616, 268502146,   8914944,  75501824,1094746178, 843055124,  69500972,
2432696345,   8593408, 153108485,1077969921,   1122336, 546324800,2420113408, 102254738,1216381192, 270808065,
 536871968, 755374084,     69776, 571080848,   2228225,  16876561,   8921088,  19005508,  37791232,   1122310,
  77645825, 422051978,2689728640, 152179236,1208034312, 603980800, 142869056,1078461440, 571105424, 135563265,
3540517377,2428510208,      4132, 168341505,   8388768, 536873217,   2425426,2214724644,1083314212,   4235266,
  68225058,   2228488, 151000130, 805314960, 201326700,2416517632,   4204560,   2146336,  20971664, 303170946,
1627701513,2166882944,  71893028, 696651784, 169967681,2424850736, 688144640, 155287681, 269631488,1074790464,
2147811912, 541073666,1612732416,   4755456,2160076928,1140850760, 150995584,  34734086, 135266305, 306516099,
  67644416, 538968132,  18878656, 549979392, 135305220,  35913744,   8929302, 605194337,1107338880, 101713920,
  10502216,2164531280,   1589412,  25169928,2187338891, 310460688, 220596288,1090584579, 583663872,   2101280,
3223617561,2487222288,1746012672,1358958592,2151678082,1140883456, 405340160,2151809172, 537039104, 272965698,
 269557808, 536887812,3259043920, 273154080,1082527748,2183659538, 536952966,  85069888, 285245449, 104924422,
1082164064,   2101272,2148533408,1209418504, 136647680, 814227746,   8521988,1107329026,  46679072,  69242953,
1109401666,2483709952, 134222368, 134751248,  37749122, 629145633, 402915458,2148534272,   8651264,1342284800,
2718966834,  67373056,1107333122, 270016672, 135430217,2147485248,2219516288,    131584,    795153,2214592804,
   2148360,2298741336,       176, 536891397,2315268170, 907094272,  67239936, 134221824, 541082624,   3145793,
1090519563,  67307542,  70256672, 323485704,2185365506,1614053888,2550989376,2148615296, 152310016, 274989184,
 839403520,   2365696,1214252049,   8544384,1140883497,2164326416, 805830672,  69255685, 273420313,2156006534,
  17842688,2435321984,   1050626,1208013061,2456126464, 638083074, 696271428,3238527104,   5243168, 142639360,
1074373184,2151743744, 605175873,1078206616,2458001444,  77627904,   4993104,   5832736,1611055616, 302023872,
2692809984,   8650752, 155256384,   9044992,   9699329,1091142682,2684504194, 151011328,1376526336,2484215972,
 621019456, 135004864,  71892994,    278528,1075848192,  41961504,   2233096,2185236560, 306184228,1149374752,
  35913816,2420261264, 136333312, 402694144,  34612258,  68192768,2149908608, 104876034, 159678976, 136393793,
 344457472, 620757576,  39846096, 268961040, 134385760,2198085705,2147500032, 540070432,   4203032, 340795556,
1159727400,       128,     82966,1074004008, 272732224,  67643696, 538972228,3238531601,   4718768, 142608384,
2449802825, 272834560,1746042916,1207992848, 272631076,   2113600,2147819536,2147699872, 562036744,3254853642,
  75497474, 537285128, 138412161,  33694080, 142610444,3490226249,2751594752, 540018688,1077940233,   5375232,
   8700417, 153092632,2147681408, 151293984,   4460608,  42009856, 738214152,   2131649, 277487652, 137363465,
  51150856, 617089300,  85985797, 419438736,  42084738,  68421697,   2625664,2152726564, 142643456,2149650561,
 806355968, 562186816,  33625088,   4866084,     32804,    794625,  79759490, 154144864,1375764609, 303169536,
1610612993, 134746698,  72892436,     16648,2281701443,2155874306, 161628168,3221295680,  42999824,1142163524,
2181890568, 268443666,1092616196,1359224856,  68157860,       872, 268505152, 604701846,    180481,3257171978,
  34079744,  10485832,2168985152, 546849152,1140885768,  18883600,2151680002,   3151873, 138416257, 104998912,
1085587744, 274792464,2182218928,     33025, 268772545,3020963842, 612375304,   2130000,  46154788,      2312,
2181046851, 268460180, 151027777,1212416000,     76192,  25444896,2150371402,   5309456,1216352264,2153783360,
 109119792, 210000384,      4610, 571498752,1219526984,1074275329, 281149442,  67113476,1242337280,2214789154,
 621838377,     73744,   1769504,1620197420,     33792, 536938546, 604242432,2315780225,   4211972,   1048577,
 270640650,   8519702,1207976032, 306745496,   1049730, 540279040, 402985032,  68157572,1090523148, 268697729,
2181120258,    147720,  18875009, 268592256,   9605120,3255338498,    526468,1610666528, 151785472,  43066500,
  70273537,   4194440,  38800384, 546329089, 301994113, 805314608, 150994956,2198405632, 272777472,  75927556,
    532545,2756198800, 150994976, 318768641,2248278020,   8405096,   4203088, 638140434, 537280552, 134481032,
 805372928,     19020,   6292609, 545783808,1140850785,2449833986, 336208128,1225949185,  34084480,2218984836,
1141901376,   4464706, 574685222,    393224,2282030080,2189494288, 603996160,      1106, 277356960,1074135300,
2149613585,  12599682, 203424352,1094718976,2148541698,1084229632, 285213202, 637684738,1074167821,2281779400,
2685928738, 620759048,1077940226, 541589652, 135534600,    262667,  67125380,  17825793,  21004800,   4259846,
 536871689,   2629696,  37751936,    131105,     98496,   1060130,   2363648,  57250818,  34751520, 135268361,
1361379344,2697011456,  16945728,1375993857, 339739808,  17041472, 153362944,  34736148,1234190852,3355488256,
 872488994,      4364, 168333312, 277897476,1144127520,2418541058,   9120004, 537926180,1107558544,2182098080,
  17860616, 150994960,    737318,  18087948,  33923202, 805832704, 201459976,1075840144,  34734080,   8425740,
  33858568,  71376898,      4129, 419442712,2424318342,  86261760,   4792832, 609746946,1074823685, 270794763,
2516583440, 142868488,2283802624, 542114816,1082560516,     73729,2492072196,   1196033,  37749265, 276826272,
1612727104,   4203090, 541083664,1099092261,2187329666,     10256,  17045576,3238625920,  37889072, 203460865,
3506471953,2416066562, 536922176,1207959569, 277947394, 553681504, 406847618, 537591958, 536875304,  35684361,
2526545920, 754979328,1074331712,  33554436,   2099212,  50339843,2155880450,1157765189, 406889088,2156986624,
   1360384,2415923224,  71304224, 688259585,3223322824,2157519872,  16777792, 138511043, 805323812,  67403776,
1375739914,2483691540, 672141313,  17564672,  37824768,1168148480,  17309706,2185366544, 143806473,   2131072,
 605095952, 681837316,1109918208,  37765392,    131397, 304423936, 818429954,1090519076, 306709009, 100797472,
 606077249,     65664, 101205008,   1098248,    331850, 268501298, 545390848,  21529682,   5243012,      4196,
2415961090, 608378880, 738247201,1073746560,2416050336,1085555264, 285212800,2148024448,1073877772,   2101376,
   8391682,  69621760, 172033152,  34103296,  11669856,  50331736,   8390672,1629487105, 453248000,2147494022,
  76548136,2415996930,  67174416,     33056,  38043650, 805323040,   2100032,1109919249, 546448416,   8652832,
1074004035,   4718978,  19945473, 419439616, 369165312, 562086728, 151257618,   4259988,1619296552, 138674243,
 839976960,  67113024,2166883840,   8913172,   1081408,1378385946, 537405440,1611694656, 150995993,2492530976,
1075085824, 268440066,  33688578,    266528, 402718792,  75581456, 144703552, 138416146, 572006452,  69238785,
 271352898,   8388742,1074790469,1073783809,2181103652,  75515937,2166358016, 603996306, 537018632,3657502728,
2216182784,    268864,   4821504,  42091552,  69339145,3240370192, 268527632, 539131972,1090552848, 105916420,
   8667168, 155713744,  34684930,1099042852,3361742986, 537930752, 746848516,  39916560, 272655360,1073776641,
1107623960, 537592064, 537037348,1241514625,   4197664,  19922944, 272638032,2147567648, 135267073,     36872,
 646471698,    262656,2164261010, 805306372,1141114912,3238633472, 545333248,1074792448,1074304145,  68296706,
   2099721, 270536704, 537083910,   9470208,1482793088, 612434962, 689969152, 172033536,  43516032, 202412032,
3238010890,     65680,   2136096,  17600641,2155873538,1144259104, 403182154,2684552228, 545522432,2449736832,
2684887072,   8388680, 150995472, 545260672,1149634656,1378353152,2487372160, 537935872,1480892928,      9220,
  83886665,2147754514,   1640452,    266240, 304095368,2457929744,  25313344,1208483840,  33554736,   3440740,
2450326530,2755666306, 555763716, 134219281,  13762564,1610645504, 273485890,2718498980,  16957449,1248067592,
 269494272,  16909124,3242201152,  41967876,1082261505,  35659793, 541065364,  16796192,1358954496, 100663584,
1075838976,2416185984,  38275072,1090666509,3254780033,2417041666,   8653312, 141066306, 276840468,   2261088,
2451677697,2156398608, 671088709,1090531336,  13633540,1157892864,   2105424,   1198080, 134610948,2550206594,
2147492866, 606096196,2150205057, 272630800, 143655176,  50865729,   4202880, 151028228, 171966993, 276825250,
   1097825,2149908674, 101729440,   1097736, 138417152, 545341440, 553786124, 151031954,    131088,  77727753,
  17301506,    524544,1142968384,  50856465,      2050, 538214912,2148278464, 609894532, 688161060, 134221824,
 302071856,    411648,1107394689, 269100212, 201326657,2181038162,   4721028,1629489664,    820224,  38806532,
  16777280,2149581450,  37815318, 546328576,  35918856, 101712128, 143017992,3372750400,   9438208,1075054912,
1073775104, 277415942,  67244065,1497400456,   9635844,   3162920,   4194880, 604045344,1619034112,   4206665,
  41945346, 201588736,2148041218,   4202528, 136354116,3523478024, 805839234,1747077125,1342445209,2147483936,
1098907656,    795328, 541081616,   1069312, 134251523, 276827136, 738198016, 184648706,  37757188,  77725696,
2166628417, 813711620,   1200640, 155222017,  72363264, 538198528,    528520,  34078738,1217528320, 301989888,
 337183008, 143004416,1207963651, 281036052,   2130208,1073808402, 335562752, 620757092,1245716488,   8397184,
 553912353,2555117696,    196754,    278536, 270532802,  34676738,  75514692,   4227216, 843596928,1216512269,
3257730640, 536895488, 537920096, 268435600,2151809318,   1097992, 155255424,2215641092, 537018888, 138454024,
 905977890,  16908292, 151027712, 545390992,1275068452,  16851458,2693267714,1141936133,1128304641,2218786944,
  10485832, 403182104, 536937506,1628439304,1241776192,2952790018, 537268296,  50331666,   9969696,1208127564,
  50602562, 872423824,  16795681,    799752,   5383424,   8388673,   4207106,  39321638,      4101,2181369864,
2483046448,     16392,1210057857,   1073184,1141018948,    303616, 545390978, 757076032,1207960193,2449473536,
1637892360, 134230018, 536873124,1610743845,2147487875, 805322754,      2052,3225424001, 537395492,1211367713,
 270534168,  67657858,1076922885, 318767632, 281157888,  26214688, 269033666,  67780608, 135299337,2149852160,
2181054496,  10502472,2281705472, 306716672,  10518561,  50627593,2688745748,1226833952, 273187457,  47254562,
1687421184, 271319168,2181169152,    279300, 169869376,2224111650, 537008204,1078558784, 570573952, 137496864,
1074103320,2424375296,1610743808,1107296256,  67182624,  10535201, 425992272,  33620998,1208353284, 136425472,
 537471008, 538970880,    103936, 273155360,1074036813,  51118593,    548864, 201359428,    266257, 104925474,
 554696744,2415927888,  34605072, 152044068, 134283272, 537411858, 547360772,  54526016, 278012052,1084622849,
3221331976,  75628816, 603996740,   4200072, 340795552,   8390720,  17048072,  67191972, 134348800, 304361473,
  67701792,  67115016,3405776082,       160,1210089824,3238068304, 268503296,1073876992,  21013513,2429749506,
  75500032, 140574720,2785019904,1074008096,3527671816,2147501088, 545655104,2315781184, 537927936,  75532328,
 268468289,   8521734, 620775424,1241784856, 278004896,1142997248,2148007936,  72941616,1627389992,2181076106,
2189435136, 134234120,2164332162,  38404096,1073743941,1344340992,  67266832, 134220352,1091044880,2424446976,
1075087936, 136839168,        50, 151289889,1476395072,2149056544, 604127744,  50856960, 810041744,   8523781,
2150105154,2415937536,1141899780, 424189952,2224104448, 612681761,2147746306, 571621424, 554696709,1076101248,
  75564032, 159514624,1077973504,  12600368, 134381825, 268477961,  75522196,1074942529,  34340888,  71313536,
  69487360,2422210624,2185232384,   9457669,2288001032,2182163504, 537137216,    626705, 273809664,1082130508,
1073807449, 805437698,1158840352,1480864256, 373293314,   3194888, 136314888,   1197076,1090519073,3225714688,
  42533120, 539230720,  34116626, 537002128,   8525832,2148017729,2689138690, 137396257, 306450568, 302130432,
1610629632,2415997592,   1048612, 671252736, 270544961,   8388608,   2379840,2315321475};

const double fib7s_tab[128] = {
0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,
196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,
102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,
12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,
591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,-10610209857723,
6557470319842,-4052739537881,2504730781961,-1548008755920,956722026041,-591286729879,365435296162,
-225851433717,139583862445,-86267571272,53316291173,-32951280099,20365011074,-12586269025,7778742049,
-4807526976,2971215073,-1836311903,1134903170,-701408733,433494437,-267914296,165580141,-102334155,63245986,
-39088169,24157817,-14930352,9227465,-5702887,3524578,-2178309,1346269,-832040,514229,-317811,196418,-121393,
75025,-46368,28657,-17711,10946,-6765,4181,-2584,1597,-987,610,-377,233,-144,89,-55,34,-21,13,-8,5,-3,2,-1,1};


const double smalldiv128[130] = {0.0,0.0,1.0,0.5,0.3333333333333333,0.25,0.2,0.1666666666666667,
0.1428571428571428,0.125,0.1111111111111111,0.1,0.09090909090909091,0.08333333333333333,0.07692307692307693,
0.07142857142857142,0.06666666666666667,0.0625,0.05882352941176471,0.05555555555555555,0.05263157894736842,
0.05,0.04761904761904762,0.04545454545454546,0.04347826086956522,0.04166666666666666,0.04,0.03846153846153846,
0.03703703703703703,0.03571428571428571,0.03448275862068965,0.03333333333333333,0.03225806451612903,0.03125,
0.0303030303030303,0.02941176470588235,0.02857142857142857,0.02777777777777778,0.02702702702702703,
0.02631578947368421,0.02564102564102564,0.025,0.02439024390243903,0.02380952380952381,0.02325581395348837,
0.02272727272727273,0.02222222222222222,0.02173913043478261,0.02127659574468085,0.02083333333333333,
0.02040816326530612,0.02,0.0196078431372549,0.01923076923076923,0.01886792452830189,0.01851851851851852,
0.01818181818181818,0.01785714285714286,0.01754385964912281,0.01724137931034483,0.01694915254237288,
0.01666666666666667,0.01639344262295082,0.01612903225806452,0.01587301587301587,0.015625,0.01538461538461539,
0.01515151515151515,0.01492537313432836,0.01470588235294118,0.01449275362318841,0.01428571428571429,
0.01408450704225352,0.01388888888888889,0.0136986301369863,0.01351351351351351,0.01333333333333333,
0.0131578947368421,0.01298701298701299,0.01282051282051282,0.01265822784810127,0.0125,0.01234567901234568,
0.01219512195121951,0.01204819277108434,0.0119047619047619,0.01176470588235294,0.01162790697674419,
0.01149425287356322,0.01136363636363636,0.01123595505617977,0.01111111111111111,0.01098901098901099,
0.0108695652173913,0.01075268817204301,0.01063829787234043,0.01052631578947368,0.01041666666666667,
0.01030927835051546,0.01020408163265306,0.0101010101010101,0.01,0.009900990099009901,0.009803921568627451,
0.009708737864077669,0.009615384615384616,0.009523809523809525,0.009433962264150943,0.009345794392523364,
0.009259259259259259,0.009174311926605505,0.00909090909090909,0.009009009009009009,0.008928571428571428,
0.008849557522123894,0.008771929824561403,0.008695652173913044,0.008620689655172414,0.008547008547008548,
0.008474576271186441,0.008403361344537815,0.008333333333333333,0.008264462809917356,0.00819672131147541,
0.008130081300813009,0.008064516129032258,0.008,0.007936507936507936,0.007874015748031496,0.0078125};

char * bigblk(int n) {
	return (char*)mmap(0, n, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, -1, 0); }

char * alloc_32k() {
	static char *cur=0, *lim = 0;
	static int bs = 65536;
	if (cur==lim) {
		cur = bigblk(bs); lim = cur+bs;
		if (bs<(1<<24)) bs += bs;
	}
	char * p = cur; cur += 32768; return p;
}

int nfa_siz = 0; char *nfa_cur = 0;
char * nf_alloc_2(int x) { if (x>32768) return (char*)malloc(x);
			   char * p = alloc_32k();  nfa_cur = p+x; nfa_siz=32768-x; return p; }

int u_sleep(int x) {
	struct timespec ts; ts.tv_sec = 0; ts.tv_nsec = 1000*x; int ec;
	do ec = nanosleep(&ts, &ts); while (ec==EINTR); return ec; }

void shuffle(int * p, int n) { for (int j, t, i=0; i<n-1; i++) 
		j = i + (random() % (n-i)), t = p[i], p[i] = p[j], p[j] = t; }

static const char*fontwid_16= "566=:?<3668=5655::::::::::55===9@;;;<:9<<55:9=<=:=;:9<;A;9<656=889:9:96::3393?::::796:9=:99:5:=";

int text_wid16(const char * s) {
	int r=0; for (; *s; s++) r += (*s<32||*s>126) ? 10 : fontwid_16[*s-32];
	return r; }

int lorem(char * to, int l) {
	int r=0; while(l>3) to[r++]='m', l-=4;
	return r + (l && (to[r]=" .ta"[l]));
}

///////// arithmetic ////////////////////////////////////////////////////////

int next_prime17(int k) {
	if ((unsigned int)(k-3)>131068) return k<3 ? 2 : 131101;
	int k11 = (k>>6), k5 = (k>>1)&31;
	BVFOR_JM(primetab17[k11]&(-1u<<k5)) return 64*k11+2*j+1;
	BVFOR_JM(primetab17[++k11])	    return 64*k11+2*j+1;
	return 131101; }

int approx_cmp(double x, double y) {
	if (x!=x) return (y==y) ? 1 : memcmp(&x,&y,8);
	if (y!=y) return -1;
	if (x==y) return 0;
	double d = x - y;
	int r = (d<0.0) ? (d=-d, -1) : 1;
	if (d<1e-280) return 0;
	if (d*1e14 < fabs(x)) return 0;
	return r;
}

int approx_cmp_v(const double *x, const double *y, int n) {
	for (int r,i=0; i<n; i++) { if ((r = memcmp(x+i,y+i,8))) {
		if (x[i]!=x[i]) return (y[i]==y[i]) ? -1 : r;
		if (y[i]!=y[i]) return 1;
		double d = x[i] - y[i];
		int r = (d<0.0) ? (d=-d, -1) : 1;
		if (d>=1e-280 && d*1e14 >= fabs(x[i])) return r;
	}}
	return 0;
}

double ipow(double x, int k) {
	double acc; if (!k) return 1.0;
	while (!(k&1)) x *= x, k>>=1;
	acc = x;
	while (k>>=1) { x *= x;  if (k&1) acc *= x; }
	return acc;
}

///////// debug tools ///////////////////////////////////////////////////////

class QSReader : public AReader {
	public:
		QSReader(int n);
		virtual ~QSReader() { free(m_buf); }
		virtual int line(char * s);
	protected:
		int m_siz, m_j;
		char * m_buf;
};

void log_sn(const char * pref, const char * str, int len, int exnl) {
	int k, l0 = pref ? strlen(pref) : 0, l2 = l0+len+1, cf = l2>2048, l3 = cf?2048:l2;
	char buf[l3+8*exnl], *q = buf+l0; memcpy(buf, pref, l0);
	if (cf) k = l2 - 2025, memcpy(q, str, 1536), sprintf(q+1536, " [%05d", k),
		memcpy(q+1543, " bytes skipped] ", 16), memcpy(q+1559, str+1536+k, 489); 
	else	memcpy(q, str, len);
	if (exnl) { if (buf[l3-2]==10) --l3; else memcpy(buf+l3-1,"[no \\n]\n",8), l3+=7; }
	else      { buf[l3-1] = 10; }
	write(2, buf, l3);
}

void log  (const char *f,...) { va_list a; va_start(a,f); vfprintf(stderr,f,a); putc(10,stderr); va_end(a); }
void log_n(const char *f,...) { va_list a; va_start(a,f); vfprintf(stderr,f,a);			 va_end(a); }

QSReader::QSReader(int n) : m_siz(12*n+20) { m_buf=(char*)malloc(m_siz); m_j=sprintf(m_buf,"Sc%d\n",n); }
int QSReader::line(char *s) {
	int j = m_j, l = strlen(s), l11 = l/11, r = l%11;   char * q = m_buf;
	if (l11<1 || j+l+8>m_siz) return BXE_PARSE;
	if (r && (r!=1 || s[--l]!='!')) return BXE_PARSE;
	q[j] = 'S'; q[j+1] = 'C'; q[j+2] = 48+l11; memcpy(q+j+3, s, l); q[j+3+l] = 10; j+=l+4; 
	return r ? (memcpy(m_buf+j,"SC0\n",4), pt_wrk_cmd(q,j+4)) : (m_j = j, 1);
}

int qstat_op(int op) { 
	static int n0=0, n1=0; int x, rv=0;
	if (op=='+') ++n0;
	else if (++n1, x=(op-48)) rv = QSE_BUG - ( ((unsigned int)x<5u) ? x : 0 );
	log("quickstat: %d/%d", n1, n0); return rv;
}

int qstat_cfg(int op, const char * arg) {
	int len; if (!arg || !*arg) arg="63", len=2; else len = strlen(arg);
	char buf[len+3]; buf[0] = 'S'; buf[1] = op; memcpy(buf+2, arg, len); buf[len+2] = 10;
	return pt_wrk_cmd(buf, len+3); }

int qstat_chk0(AReader ** ppr, const char *s) {
	if (*ppr) return GCE_CONT2;
	int k = atoi(s); if (k<1 || k>511) return EEE_RANGE;
	*ppr = new QSReader(k); qstat_op('+'); return 0;
}

///////// sorting ASCII strings /////////////////////////////////////////////

typedef void (*ssort_t) (char**, char**, int);

#define sqless(i,j) (strcmp(fr[i]+k, fr[j]+k) < 0)
static void ssort_2x(char ** to, char ** fr, int k) {
	if (sqless(1,0)) to[0]=fr[1], to[1]=fr[0];
	else to[0]=fr[0], to[1]=fr[1]; }

#define perm3(x,y,z) (to[0]=fr[x], to[1]=fr[y], to[2]=fr[z])
static void ssort_3x(char ** to, char ** fr, int k) {
	if (sqless(0,1)) {
		if (sqless(1,2)) perm3(0,1,2);
		else if (sqless(0,2)) perm3(0,2,1);
		else perm3(2,0,1);
	} else {
		if (sqless(2,1)) perm3(2,1,0);
		else if (sqless(0,2)) perm3(1,0,2);
		else perm3(1,2,0);
	}}

static void ssort_4x(char ** to, char ** fr, int k) {
	int sf[2], md[2]; sf[0] = sqless(0,1); sf[1] = 2+sqless(2,3);
	int f1 = sqless(sf[0],     sf[1]), fM = sf[f1]; md[0] = sf[f1^1];
	int f2 = sqless(sf[1]^1, sf[0]^1), fm = sf[f2]^1; md[1] = sf[f2^1]^1;
	int j = ((md[0]^md[1])==1) ? (sf[md[0]>>1] ^ md[0]) & 1
				   : sqless(md[0], md[1]);
	to[0] = fr[fm]; to[1] = fr[md[j^1]]; to[2] = fr[md[j]]; to[3] = fr[fM];
}

#define perm5(x,y,z,u,v) (to[0]=fr[x], to[1]=fr[y], to[2]=fr[z], to[3]=fr[u], to[4]=fr[v])
static void ssort_5x(char ** to, char ** fr, int k) {
	int A = (9*sqless(0,1)) ^ 1;
	int B = (9*sqless(2,3)) ^ 19;
	if (sqless(B&7, A&7)) A ^= B, B ^= A, A ^= B;
	int a = A>>3, b = B>>3; A &= 7; B &= 7;
//	fprintf(stderr,"A:%d B:%d a:%d b:%d\n", A, B, a, b);
	if (sqless(4, B)) {
		if (sqless(B, a)) {
			if (sqless(a, b)) sqless(4, A) ? perm5(4,A,B,a,b) : perm5(A,4,B,a,b);
			else              sqless(4, A) ? perm5(4,A,B,b,a) : perm5(A,4,B,b,a);
		} else {
			if      (sqless(4, A)) perm5(4,A,a,B,b);
			else if (sqless(4, a)) perm5(A,4,a,B,b);
			else 		       perm5(A,a,4,B,b);
		}
	} else {
		if (sqless(4, b)) {
			if (sqless(a, 4)) sqless(a, B) ? perm5(A,a,B,4,b) : perm5(A,B,a,4,b);
			else		  sqless(a, b) ? perm5(A,B,4,a,b) : perm5(A,B,4,b,a);
		} else {
			if (sqless(a, b)) sqless(B, a) ? perm5(A,B,a,b,4) : perm5(A,a,B,b,4);
			else 	          sqless(4, a) ? perm5(A,B,b,4,a) : perm5(A,B,b,a,4);
		}
	}
}
static ssort_t ssort_tab[6] = { 0, 0, ssort_2x, ssort_3x, ssort_4x, ssort_5x };
#define N_SORTFUN 5

static void ssort_2(char ** to, char ** fr, int len, int k) {
	if (len<=N_SORTFUN) return (*ssort_tab[len])(to, fr, k);
	int next[len];
	char *tmpbuf[len], **tmp = tmpbuf;
	int head[96];
	unsigned int map[3]; 
	while(1) {
		int x, i, j;
		map[0] = map[1] = map[2] = 0u; j = 0;
		for (i=0; i<len; i++) {
			int c = (fr[i][k] - 31) & 255; c &= ((c-96) >> 9);
			int ch = c>>5, cl = c&31;
			unsigned int m1 = 1u << cl;
			int nflg = (int) (map[ch] & m1); nflg = ~( (nflg|-nflg) >> 31 );
			next[i] = head[c] | nflg; head[c] = i; map[ch] |= m1; j -= nflg;
		}
		if (j==1) {
			if (map[0] & 1u) { memcpy(to, fr, len*sizeof(char*)); return; }
			++k; continue;
		}
		int ti = 0;
		if (map[0] & 1u) {
			map[0] &= ~1u;
			for (x = head[0]; x>=0; x = next[x]) to[ti++] = fr[x];
		}
		int max_tj = 0, max_ti = 0;
		for (i=0; i<3; i++) {
			int j; unsigned int m; int * ph = head+32*i;
			for (m = map[i]; (j = __builtin_ffs(m)-1) >= 0; m &= ~(1u<<j)) {
				int x = ph[j], tj = 0;
				if (next[x]<0) { to[ti++] = fr[x]; continue; }
				for (; x>=0; x = next[x]) tmp[ti+(tj++)] = fr[x];
				if (tj <= N_SORTFUN) {
					(*ssort_tab[tj])(to+ti, tmp+ti, k+1);
				} else if (tj <= max_tj) {
					ssort_2(to+ti, tmp+ti, tj, k+1);
				} else {
					if (max_tj) ssort_2(to+max_ti, tmp+max_ti, max_tj, k+1);
					max_ti = ti; max_tj = tj;
				}
				ti += tj;
			}
		}
		if (!max_tj) return;
		char **pp = tmp+max_ti; tmp = fr+max_ti; fr = pp; to += max_ti;
		len = max_tj; ++k;
	} 
}

void ssort(char ** pp, int len, int k) {
	if (len<2) return;
	char * tmp[len]; memcpy(tmp, pp, len*sizeof(char*));
	ssort_2(pp, tmp, len, k);
}

///////// number parsing (incl. NaN) ////////////////////////////////////////

void wrnan_seq(void * to, const int * p, int n) {
        long long xl, tl;
        if ((unsigned int)n > 15u) n = 15;
        xl = nan_pkdat[n];
        int bits = xl & 63; xl ^= bits;
        long long msk = (1LL << bits) - 1LL;
        int i, j;
        for (i=j=0; i<n; i++, j+=bits)
                tl = (long long)p[i], xl |= (tl&(1LL<<63)) | ((tl&msk)<<j);
        memcpy(to, &xl, 8);
}

void wrnan_lbl(void * to, const char * s, int n) {
        int i,j;
        long long xl = NAN_LBL;
        if ((unsigned int)n > 6u) n = 6;
        for (i=j=0; i<n; i++, j+=7) xl |= (long long)(s[i]&127) << j;
        xl |= (NAN_SMSK<<n) & NAN_SMSK;
        memcpy(to, &xl, 8);
}

int parse_num(void * to, const char * s) {
        int i,j,k,n;
        char buf[24];
	const char *s0 = s;
        int dat[16], c, emd = 0, dfl = 0;
        while (*s==' ') ++s;
        if (*s==':') for (++s; *s==' '; s++);
        switch(*s) {
		case 0:   *(double*)to = 0.0; return 1;
                case 'n': case 'N':
                          memcpy(to, nan_dflt2, 8);
                          return 1+2*(((s[1]|32)=='a') && ((s[2]|32)=='n'));
                case '-':
                          if ((s[1]|32)=='n') return memcpy(to, nan_dflt2+1, 8),
                                  2+2*(((s[2]|32)=='a') && ((s[3]|32)=='n'));
		case '.': case '+': case 48: case 49: case 50: case 51:
                case 52: case 53: case 54: case 55: case 56: case 57:
                          dfl = ((buf[0] = *s) == '.');
                          for (i=1; i<24; buf[i++]=c, emd+=emd) {
                                  c = s[i];
                                  if (c>47 && c<58) continue;
                                  if (c=='.') { if (dfl++) break; else continue; }
                                  if ((c|33)=='e') { if (emd++) break; else continue; }
                                  if (c=='+' || c=='-') { if (emd!=2) break; else continue; }
				  break;
                          }
                          buf[i] = 0; *(double*)to = atof(buf);
                          return s - s0 + i;
                case '#':
                          for (i=1; i<17; i++) if (!(s[i]&80)) return *(double*)to=1.2345, i;
			  *(double*)to = hx2doub(s+1); return 17;
                case '"':
                          for (i=1; i<7; i++) if (s[i]<32 || s[i]==34 || s[i]>126) break;
                          wrnan_lbl(to, s+1, i-1); return i + (s[i]==34);
                case '[':
                          i=1; j=0;
                          while (1) {
                                  while (s[i]==' ') ++i;
                                  int c = s[i], sg = 0;
                                  if (!c || c==']') { ++i; break; }
                                  if (j==15) break;
                                  if (c=='-') ++i, sg = -1;
                                  else if (c=='+') ++i;
                                  for (n=0; (unsigned int)(k=s[i]-48)<10u; i++) n = 10*n + k;
                                  dat[j++] = (n^sg) - sg;
                          }
                          wrnan_seq(to, dat, j); return i;
                default: memcpy(to, nan_pkdat, 8); return 1;
        }}

const char * dbl2str_s(int ix, double x) {
	static char buf[192];
	char *p = buf + 48 * (ix&3);
	p[dbl2str(p, x)] = 0; return p;
}

///////// 20-bit audio out //////////////////////////////////////////////////

static inline int pml2(int x) { return x>>=7, (x*(0x56000-11*x))>>23; }

static void packhi_2a(char* to, const char *p, const char * q, int n) {   int i;
        if (!q) for (p+=4; n--; to+=4, p+=8) memcpy(to, p, 4);
        else for (i=0,p+=4,q+=4,n>>=1; i<n; i++) memcpy(to+8*i, p+8*i, 4), memcpy(to+8*i+4, q+8*i, 4); }

static int fa_w2k(fa_writer * fa, int fl) {
        int i,j,k, max = 0;
        unsigned short *q16 = fa->blk.lo;
        unsigned char  *q8  = fa->blk.hi;
        unsigned int *p = fa->buf, x, y;
        if (fl) for (i=fa->cur; i<818; i++) p[i] = 0u;
        for (i=0; i<818; i++) { if ((k=p[i]&0x7fffffff)>max) max = k; if (k>0x4fffffff) abort(); }
        int xp = max>>20; if (xp<0x380) xp = 0x380;
        for (i=0; i<818; i++) {
                x = p[i]; y = (x&0x80000000);
                k = xp - ((x>>20)&2047); if (k>20) { p[i] = 0x80000; continue; }
                if (k<0) return log("fa_w2k: inf/nan found"), -1;
                x = (262144u | ((x&0xfffff)>>2)) >> k;
                p[i] = y ? (0x80000-x) : (0x80000+x);
        }
        for (i=j=0; i<409; i++,j+=2) x = p[j], y = p[j+1], q16[j] = x&65535, q16[j+1] = y&65535,
                                     q8[i] = (x>>16)|((y>>12)&0xf0);
        unsigned short mxv = 256u*(xp>0x47f?255u:xp-0x380u) + pml2(max & 0xfffff);
        if (mxv>40000) fprintf(stderr, "wtf???\n"), abort();
        fa->blk.xp16 = fa->toc[k = fa->cnt++ & 1023] = mxv; fa->cur = 0;
        if (write(fa->fd, &fa->blk, 2048)<2048) return -1;
        if (fl) { for (i=k+1; i<1024; i++) fa->toc[i] = 0u; if (fa->nch==1) fa->cnt = ~fa->cnt;
                  if (write(fa->fd, fa->toc, 2048)<2048 || write(fa->fd, &fa->cnt,4)<4) return -1;
                  return close(fa->fd), 1; }
        if (k==1023 && write(fa->fd, fa->toc, 2048)<2048) return -1;
        return 0;
}

const char * au_file_name(const char *dir, int dlen, int id, const char *a1, const char *a2, const char *ext) {
	static char * bptr[2];  static int blen[2];
	int hx[2], j, al1, al2, ix = !memcmp(ext, "a20", 4), elen = ix ? 4 : strlen(ext),
	    siz = dlen + (al1=a1?strlen(a1)+1:0) + (al2=a2?strlen(a2)+1:0) + elen + 16;
	if (blen[ix]<siz) { for (blen[ix] += 8*!blen[ix]; blen[ix] < siz; blen[ix] <<= 1); 
		 	    free(bptr[ix]); bptr[ix] = (char*)malloc(blen[ix]); }
	char * q = bptr[ix]; memcpy(q, dir, dlen); q[dlen]='/';
	hx[0] = qh4((unsigned int)id>>16u) | 0x20202020; 
	hx[1] = qh4(	         id&65535) | 0x20202020; memcpy(q+dlen+1, hx, 8); j = dlen+9;
	if (al1) q[j] = '_', memcpy(q+j+1, a1, al1-1), j += al1;
	if (al2) q[j] = '_', memcpy(q+j+1, a2, al2-1), j += al2;
	q[j] = '.'; memcpy(q+j+1, ext, elen+1);
	return q;
}

const char * au_file_name(int id, int j) {
	static char *srcp = 0, *dstp = 0;
	const char *dir, *ext; int dlen, elen;
	switch(j&6) {
		case 0:
		case 6: if (*(dir=CFG_AO_DIR.s)) dlen = CFG_AO_DIR.i;
			else  dir=QENV('t'), 	 dlen = QENVL('t');     break;
		case 2: dir = ".", dlen = 1; break;
		case 4: dir = QENV('h'), dlen = QENVL('h'); break;
		default: return "WTF";
	}
	if (!j) ext=FA_SUFFIX, elen=FA_SUFFIX_ZLEN; else ext = ".wav\0.flac"+5*(j&1), elen = 5+(j&1);
	char **pp = j ? &dstp : &srcp, *p = *pp = (char*)realloc(*pp, dlen+9+elen);
	memcpy(p, dir, dlen); p[dlen] = '/'; sprintf(p+dlen+1, "%08x", id); memcpy(p+dlen+9, ext, elen);
	return p;
}

int fa_start(fa_writer * fa, int nch) {
	static int id = -1;
        fa->cnt = fa->fd = fa->cur = 0;
        if (id<0) id = time(NULL); else ++id;
	const char * nm = au_file_name(fa->id = id, 0);
	fa->nch = nch; 
	int r = fa->fd = creat(nm, 0600);
	return (r<0) ? (gui_errq_add(EEE_ERRNO), log("autmp: \"%s\": %s", nm, strerror(errno)), EEE_A20) : 0;
}

int fa_add12(fa_writer * fa, const double * x, const double * y, int n) { while (1) {
        int n2 = 818 - fa->cur, n22 = y ? n2>>1 : n2;
        if (n<n2) return n<1 ? 0 : (packhi_2a((char*)(fa->buf+fa->cur), (const char*)x, (const char*)y, n),
                        fa->cur+=n, 0);
        packhi_2a((char*)(fa->buf+fa->cur), (const char*)x, (const char*)y, n2); if (fa_w2k(fa,0)<0) return -1;
        n-=n2; x+=n22; if(y) y+=n22;
}}

int fa_end(fa_writer * fa) { return fa_w2k(fa, 1); }

//////////////////////// scale ///////////////////////////////////////////////////////////////

double Scale01::f0(double v0, double v1, int ty, double x) {
        switch(ty) {
                case  1:case '-': return (1.0-x)*v0 + x*v1;
                case  0:case 'l': return v0 * pow(v1/v0, x);
                case  3:case 'c': v0=cbrt(v0); v1=cbrt(v1); x=(1.0-x)*v0+x*v1; return x*x*x;
                case -3:case 'C': v0=1.0/cbrt(v0); v1=1.0/cbrt(v1); x=(1.0-x)*v0+x*v1; return 1.0/(x*x*x);
                case -1:case 'h': v0=1.0/v0; v1=1.0/v1; x=(1.0-x)*v0+x*v1; return 1.0/x;
                default: break;
        }
        double sg = 1.0;
        if (v0<0.0) v0 = -v0, v1 = -v1, sg = -sg;
        if (v1<0.0) return NAN;
        switch (ty) {
                case  2:case 'q': v0=sqrt(v0); v1=sqrt(v1); x=(1.0-x)*v0+x*v1; return sg*x*x;
                case -2:case 'Q': v0=1.0/sqrt(v0); v1=1.0/sqrt(v1); x=(1.0-x)*v0+x*v1; return sg/(x*x);
                default: return NAN;
        }}

void Scale01::set_ty_2(int ty) {
        if (ty<-3) return;
        if (ty<=3) { m_ty = ty; return; }
        for (int i=0; i<7; i++) {
                if (ty=="CQhl-qc"[i]) { m_ty = i-3; return; }}}

void Scale01::upd_t01() { switch(m_ty) {
        case -3: m_t0 = 1.0/cbrt(m_v0); m_t1 = 1.0/cbrt(m_v1) - m_t0; return;
        case -2: if (m_v0>=0.0&&m_v1>=0.0) m_sg=1.0, m_t0=1.0/sqrt(m_v0), m_t1=1.0/sqrt(m_v1)-m_t0;
                         else m_sg=-1.0, m_t0=1.0/sqrt(-m_v0), m_t1=1.0/sqrt(-m_v1)-m_t0;    return;
        case -1: m_t0 = 1.0/m_v0; m_t1 = 1.0/m_v1 - m_t0; return;
        case  0: m_t1 = log(m_v1/m_v0); return;
        case  1: m_t1 = m_v1 - m_v0; return;
        case  2: if (m_v0>=0.0&&m_v1>=0.0) m_sg=1.0, m_t0=sqrt(m_v0), m_t1=sqrt(m_v1)-m_t0;
                         else m_sg=-1.0, m_t0=sqrt(-m_v0), m_t1=sqrt(-m_v1)-m_t0;   return;
        case  3: m_t0 = cbrt(m_v0); m_t1 = cbrt(m_v1) - m_t0; return;
        default: return;
}}

double Scale01::f(double x) { double z; switch(m_ty) {
                case -3: z = m_t0 + x*m_t1; return 1.0/(z*z*z);
                case -2: z = m_t0 + x*m_t1; return m_sg/(z*z);
                case -1: return 1.0 / (m_t0 + x*m_t1);
                case  0: return m_v0 * exp(x*m_t1);
                case  1: return m_v0 + x*m_t1;
                case  2: z = m_t0 + x*m_t1; return m_sg*z*z;
                case  3: z = m_t0 + x*m_t1; return z*z*z;
                default: return 0.0;
}}

#define SVLOOP(X) for (int i=1; i<n-1; i++) y += z, q[i]=(X); return
void Scale01::vec(double *q, double x0, double x1, int n, int ty) {
	if(n<4){switch(n) {
		case 1: q[0] = f0(x0,x1,ty,.5); return;
		case 2: q[0] = x0, q[1] = x1;   return;
		case 3: q[0] = x0, q[1] = f0(x0,x1,ty,.5); q[2] = x1; return;
		default: return; }}
	q[0] = x0; q[n-1] = x1;   if ( ((1<<(ty+3))&34) && x0<0.0 ) x0=-x0, x1=-x1, ty+=ty;
	double y, z, d = (1.0/(double)(n-1));
	switch(ty) {
		case -4: y = 1.0/sqrt(x0), z=d*(1.0/sqrt(x1)-y); SVLOOP(-1.0/(y*y));
		case -3: y = 1.0/cbrt(x0), z=d*(1.0/cbrt(x1)-y); SVLOOP(1.0/(y*y*y));
		case -2: y = 1.0/sqrt(x0), z=d*(1.0/sqrt(x1)-y); SVLOOP(1.0/(y*y));
		case -1: y = 1.0/x0, 	   z=d*(1.0/x1 - y);	 SVLOOP(1.0/y);
		case  0: y = x0; z = pow(x1/x0, d); for (int i=1; i<n-1; i++) q[i] = (y*=z); return; 
		case  1: y = x0; z = d*(x1-x0);		   SVLOOP(y);
		case  2: y = sqrt(x0); z = d*(sqrt(x1)-y); SVLOOP(y*y);
		case  3: y = cbrt(x0); z = d*(cbrt(x1)-y); SVLOOP(y*y*y);
		case  4: y = sqrt(x0); z = d*(sqrt(x1)-y); SVLOOP(-y*y);
		default: for (int i=1; i<n-1; i++) q[i] = NAN; return;
	}}

// file util
int is_asv_name(const char *s) { // /.../__asv.lf /.../__asv--x.lf
	int c, l = strlen(s);   const char * as = QENV('a');
	if (!memcmp(s, as, l+1)) return '0';
	return (!memcmp(s,as,l-6) && !memcmp(s+l-6,"--",2) && (c=s[l-4]) && !memcmp(s+l-3,".lf",4)) ? c : 0; }

int coward(const char * fn) {
	int r,fd; struct stat st;
	if ((r = stat(fn, &st))<0) return errno!=ENOENT && (gui_errq_add(EEE_ERRNO, fn), 1);
	if ((st.st_mode&S_IFMT)!=S_IFREG) return 1;
	if ((fd = open(fn, O_RDONLY)) < 0) return gui_errq_add(EEE_ERRNO, fn), 1;
	char buf[32]; memset(buf, 0, 32);
	r = (read(fd,buf,32)>0) && memcmp(buf, "# lflab save file\n_V", 20)
				&& memcmp(buf, "#!/usr/bin/lflab\n_V", 19)
				&& memcmp(buf, "_V0.4\n:TN.$F", 12)
				&& memcmp(buf, "_V0.4\n::F:RC", 12);
	close(fd); return r;
}
